# MicroPython SSD1306 OLED driver, I2C and SPI interfaces

from micropython import const
import framebuf, time, math, gc


# register definitions
SET_CONTRAST        = const(0x81)
SET_ENTIRE_ON       = const(0xa4)
SET_NORM_INV        = const(0xa6)
SET_DISP            = const(0xae)
SET_MEM_ADDR        = const(0x20)
SET_COL_ADDR        = const(0x21)
SET_PAGE_ADDR       = const(0x22)
SET_DISP_START_LINE = const(0x40)
SET_SEG_REMAP       = const(0xa0)
SET_MUX_RATIO       = const(0xa8)
SET_COM_OUT_DIR     = const(0xc0)
SET_DISP_OFFSET     = const(0xd3)
SET_COM_PIN_CFG     = const(0xda)
SET_DISP_CLK_DIV    = const(0xd5)
SET_PRECHARGE       = const(0xd9)
SET_VCOM_DESEL      = const(0xdb)
SET_CHARGE_PUMP     = const(0x8d)

class SSD1306(object):
    def __init__(self,spi, dc, res):
        self.rate = 10 * 1024 * 1024
        if dc: dc.init(dc.OUT, value=0)
        if res: res.init(res.OUT, value=0)
        self.spi = spi
        self.dc = dc
        self.res = res
        self.res(1)
        time.sleep_ms(1)
        self.res(0)
        time.sleep_ms(10)
        self.res(1)
        
        for cmd in (
            SET_DISP | 0x00, # off
            # address setting
            SET_MEM_ADDR, 0x00, # horizontal
            # resolution and layout
            SET_DISP_START_LINE | 0x00,
            SET_SEG_REMAP | 0x01, # column addr 127 mapped to SEG0
            SET_MUX_RATIO, 0x3F,
            SET_COM_OUT_DIR | 0x08, # scan from COM[N] to COM0
            SET_DISP_OFFSET, 0x00,
            SET_COM_PIN_CFG, 0x02,
            # timing and driving scheme
            SET_DISP_CLK_DIV, 0x80,
            SET_PRECHARGE, 0x22 ,
            SET_VCOM_DESEL, 0x30, # 0.83*Vcc
            # display
            SET_CONTRAST, 0xff, # maximum
            SET_ENTIRE_ON, # output follows RAM contents
            SET_NORM_INV, # not inverted
            # charge pump
            SET_CHARGE_PUMP, 0x10 ,
            SET_DISP | 0x01): # on
          self.write_cmd(cmd)


    def poweroff(self):
      self.write_cmd(SET_DISP | 0x00)

    def poweron(self):
      self.write_cmd(SET_DISP | 0x01)

    def contrast(self, contrast):
      self.write_cmd(SET_CONTRAST)
      self.write_cmd(contrast)

    def invert(self, invert):
      self.write_cmd(SET_NORM_INV | (invert & 1))
        
    def clear(self):
      for i in range(8):
        self.write_cmd(0xb0+i)
        self.write_cmd(0x00)
        self.write_cmd(0x10)
        for n in range(128):
          self.write_data(0x00)  
        
    def write_cmd(self, cmd):
      self.spi.init(baudrate=self.rate, polarity=0, phase=0)
      self.dc(0)
      self.spi.write(bytearray([cmd]))

    def write_data(self, buf):
      self.spi.init(baudrate=self.rate, polarity=0, phase=0)
      self.dc(1)
      self.spi.write(buf)
          
    def set_pos(self, x, y):
      if x<128 and y<8:
        self.write_cmd(0xb0+y)
        self.write_cmd(((x&0xf0)>>4)|0x10)
        self.write_cmd(x&0x0f)
        
    def char(self, x, y, ch):
      Font6x8  = [[0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                  [0x00, 0x00, 0x00, 0x2f, 0x00, 0x00],
                  [0x00, 0x00, 0x07, 0x00, 0x07, 0x00],
                  [0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14],
                  [0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12],
                  [0x00, 0x62, 0x64, 0x08, 0x13, 0x23],
                  [0x00, 0x36, 0x49, 0x55, 0x22, 0x50],
                  [0x00, 0x00, 0x05, 0x03, 0x00, 0x00],
                  [0x00, 0x00, 0x1c, 0x22, 0x41, 0x00],
                  [0x00, 0x00, 0x41, 0x22, 0x1c, 0x00],
                  [0x00, 0x14, 0x08, 0x3E, 0x08, 0x14],
                  [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08],
                  [0x00, 0x00, 0x00, 0xA0, 0x60, 0x00],
                  [0x00, 0x08, 0x08, 0x08, 0x08, 0x08],
                  [0x00, 0x00, 0x60, 0x60, 0x00, 0x00],
                  [0x00, 0x20, 0x10, 0x08, 0x04, 0x02],
                  [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E],
                  [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00],
                  [0x00, 0x42, 0x61, 0x51, 0x49, 0x46],
                  [0x00, 0x21, 0x41, 0x45, 0x4B, 0x31],
                  [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10],
                  [0x00, 0x27, 0x45, 0x45, 0x45, 0x39],
                  [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30],
                  [0x00, 0x01, 0x71, 0x09, 0x05, 0x03],
                  [0x00, 0x36, 0x49, 0x49, 0x49, 0x36],
                  [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E],
                  [0x00, 0x00, 0x36, 0x36, 0x00, 0x00],
                  [0x00, 0x00, 0x56, 0x36, 0x00, 0x00],
                  [0x00, 0x08, 0x14, 0x22, 0x41, 0x00],
                  [0x00, 0x14, 0x14, 0x14, 0x14, 0x14],
                  [0x00, 0x00, 0x41, 0x22, 0x14, 0x08],
                  [0x00, 0x02, 0x01, 0x51, 0x09, 0x06],
                  [0x00, 0x32, 0x49, 0x59, 0x51, 0x3E],
                  [0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C],
                  [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36],
                  [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22],
                  [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C],

                  [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41],
                  [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01],
                  [0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A],
                  [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F],
                  [0x00, 0x00, 0x41, 0x7F, 0x41, 0x00],
                  [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01],
                  [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41],
                  [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40],
                  [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F],
                  [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F],
                  [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E],
                  [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06],
                  [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E],
                  [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46],
                  [0x00, 0x46, 0x49, 0x49, 0x49, 0x31],
                  [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01],
                  [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F],
                  [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F],
                  [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F],
                  [0x00, 0x63, 0x14, 0x08, 0x14, 0x63],
                  [0x00, 0x07, 0x08, 0x70, 0x08, 0x07],
                  [0x00, 0x61, 0x51, 0x49, 0x45, 0x43],
                  [0x00, 0x00, 0x7F, 0x41, 0x41, 0x00],
                  [0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55],
                  [0x00, 0x00, 0x41, 0x41, 0x7F, 0x00],
                  [0x00, 0x04, 0x02, 0x01, 0x02, 0x04],
                  [0x00, 0x40, 0x40, 0x40, 0x40, 0x40],
                  [0x00, 0x00, 0x01, 0x02, 0x04, 0x00],
                  [0x00, 0x20, 0x54, 0x54, 0x54, 0x78],
                  [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38],
                  [0x00, 0x38, 0x44, 0x44, 0x44, 0x20],
                  [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F],
                  [0x00, 0x38, 0x54, 0x54, 0x54, 0x18],
                  [0x00, 0x08, 0x7E, 0x09, 0x01, 0x02],
                  [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C],
                  [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78],
                  [0x00, 0x00, 0x44, 0x7D, 0x40, 0x00],
                  [0x00, 0x40, 0x80, 0x84, 0x7D, 0x00],
                  [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00],
                  [0x00, 0x00, 0x41, 0x7F, 0x40, 0x00],
                  [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78],
                  [0x00, 0x7C, 0x08, 0x04, 0x04, 0x78],
                  [0x00, 0x38, 0x44, 0x44, 0x44, 0x38],
                  [0x00, 0xFC, 0x24, 0x24, 0x24, 0x18],
                  [0x00, 0x18, 0x24, 0x24, 0x18, 0xFC],
                  [0x00, 0x7C, 0x08, 0x04, 0x04, 0x08],
                  [0x00, 0x48, 0x54, 0x54, 0x54, 0x20],
                  [0x00, 0x04, 0x3F, 0x44, 0x40, 0x20],
                  [0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C],
                  [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C],
                  [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C],
                  [0x00, 0x44, 0x28, 0x10, 0x28, 0x44],
                  [0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C],
                  [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44],
                  [0x00, 0x00, 0x10, 0xFE, 0x82, 0x00],
                  [0x00, 0x00, 0x00, 0xFF, 0x00, 0x00],
                  [0x00, 0x82, 0xFE, 0x10, 0x00, 0x00],
                  [0x02, 0x01, 0x01, 0x02, 0x02, 0x01]]
      i = 0
      c = ord(ch)-32
      if c < 99:
        self.set_pos(x,y)
      for i in range(6):
       self.write_data(Font6x8[c][i])
       
    def string(self, x, y, buf):
      for i in buf:
        if i == '\0':
          break
        self.char(x, y, i)
        x = x + 6;
        if x>122:
          x = 0
          y = y + 1


